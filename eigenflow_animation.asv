% Authors: Nathaniel Ruhl and Shinya Kondo
% This script performs DMD analysis and, plots the DMD evals and evecs, and
% creates an animation

%% Read in CFD
dt = 0.005; % Time steps (s)
nt = 100;  % number of time steps
total_time = 0.5;   % sec, totaltime duration of experiment
xmin = -2.5; xmax = 17.5; ymin = -4; ymax = 4; 
nx = 500; ny = 500;
x = linspace(xmin,xmax,nx);
y = linspace(ymin,ymax,ny);
t = linspace(0, total_time, nt);


% Define relevant info for reading in data files
args1 = {"FinalData/StationaryCylinderFinal/FFF-0",200};  % STATIONARY CYLINDER
args2 = {"FinalData/moving1final/FFF--0",300};   % OSCILLATIONG CYLINDER (frequency ratio R=0.5)
args3 = {"FinalData/moving2final/FFF--0", 300}; % OSCILLATING CYLINDER (R=1.0)
args4 = {"FinalData/moving3final/FFF--0", 300}; % OSCILLATING CYLINDER (R=1.5)

% Define the argument list for the flow that you want to use in this
% notebook
% arg_list = {x, y, t, args2{1}, args2{2}};

[XX, YY, v_matrix] = readData(x,y,t,args2{1},args2{2});

%% Calculate non-reduced DMD
[Phi, eval] = calcDMD(v_matrix, t);
lambda = diag(eval);   % 1d array

g = diag(real(log(eigs)./2./pi./dt));

freq = diag(imag(log(eigs)./2./pi./dt));

% g = angle(lambda)/(2*pi*dt);   % growth rates
% freq = log(abs(lambda))/dt;   % frequencies (Hz?)

%% Make DMD eigenvalue plots
figure(1)
plot(real(lambda), imag(lambda), "o")
xlabel("$Re(\lambda)$", 'Interpreter', 'latex')
ylabel('$Im(\lambda)$', 'Interpreter', 'latex')
title("DMD Eigenvalues for $f_e/f_0=0.5$", 'Interpreter', 'latex')
daspect([1 1 1])

% How to plot the growth rates??

%% Plot the n'th DMD eigenflow

n = 4;
% Velocity components (may be complex)
phi_matrix_x = reshape(Phi(1:nx*ny,n), [nx, ny]);
phi_matrix_y = reshape(Phi(nx*ny+1:2*nx*ny,n), [nx, ny]);

% Velocity magnitude field (may be complex)
phi_matrix_mag = sqrt(phi_matrix_x.^2+phi_matrix_y.^2);

figure()
contourf(XX, YY, real(phi_matrix_mag))
axis([-2.5 17.5 -3 3])
title(sprintf("Mode %d", n))
daspect([1 1 1])
colorbar()

%% Evolve the n'th DMD mode in time

n = 1;

DMD_eigenmode = sqrt(real(Phi(1:nx*ny,n)).^2+real(Phi(nx*ny+1:2*nx*ny,n)).^2); 

mode_evolve = zeros(nx*ny,length(t));

for i = 1:length(t)
    mode_evolve(:,i) = DMD_eigenmode.*exp(lambda(n)*t(i));
end 


%% Create the animation
% Fill in the file name with what ratio this is
video = VideoWriter(append("ratio1-0_", sprintf("dmd_mode%d", n)));
video.FrameRate = 10; % set frames per second
open(video);

for i = 2:length(t)
    contourf(XX,YY,reshape(real(mode_evolve(:,i)),[nx,ny]),'edgecolor','none')
    title(int2str(i))
    axis off
    frame = getframe(gcf);
    writeVideo(video,frame)
end

close(video)

%% Functions

% Function to identify the N'th eigenflow
% Returns 2 matrices, evecs and evals of linear operator
function [Phi, Lambda] = calcDMD(v_matrix, t)
nt = length(t);
%DMD Analysis (Not reduced)
X = v_matrix(:,1:nt-1);
X2 = v_matrix(:,2:nt);

% Find POD modes of X
[U, S, V] = svd(X, 'econ');

% Compute DMD using "reduced order matrices" (only use r modes)
% Phi are evecs of A
% r = 9;
% Ured = U(:,1:r);
% Sred = S(1:r,1:r);
% Vred = V(1:nt-1,1:r);
Ured = U;
Sred = S;
Vred = V;

% Build the best-fit linear model that shows how POD modes evolve in time
Atilde = Ured'*X2*Vred/Sred;  % project A onto U bases vectors
[W, eigs] = eig(Atilde);  % compute e-vecs and evals of Atilde
Phi = X2*Vred/Sred*W;  % recover full-dimensional eigenflow

Lambda = eigs;

end

% Function to identify the N'th eigenflow and complex eigenvector 
% (this is not correct, but I'll keep the function here incase we have to do anything similar)
function [phi_n, lambda_n] = getNthEigenflow(Phi, Lambda, n)
lambda = abs(diag(Lambda));
lambda_imag = diag(Lambda);

% identify the largest eigenvalues
[~, sortIdx] = sort(lambda,'descend');

phi_n = Phi(:,sortIdx(n));
lambda_n = lambda_imag(sortIdx(n));

end

